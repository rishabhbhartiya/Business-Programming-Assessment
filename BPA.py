# -*- coding: utf-8 -*-
"""LOCUS_ASSIGNMENT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZeijF-UP3k8POU0dxAnTul573U4dBAST

#1. **Customer Details**
Create a program that allows customers to enter their details to create a new account. Each customer
should be asked to input the following information:


a. Customer's name

b. Mobile number

c. Address

d. Email address

e. Date of Birth

The program should validate the entered details and store them securely (Using appropriate Data
Structure). If the user registration is successful (based on age is more than 21 and mobile number is
10 digit), display a success message with all the entered details; otherwise, display an appropriate
error message.

##Concepts: def Function, Input function, Comparision Operator,Membership operator, While loop, datetime module and its functions if statement, try-except and dictionary.
"""

"""This program takes multiple input as Customer's name, Mobile number, Address, Email address, Date of Birth and then validate some of them as per conditions."""

# Creating this function according to requirement mentioned above.
def customer_account():
  # Getting the name of the user as an input.
  name = input("Enter your name: ")
  # Getting the mobile number of the user as an input.
  mobile_number = input("Enter your mobile number: ")

  """Validate mobile number: (We put a check if the mobile number contains 10 digits,
  it will print the number else it will again ask for the mobile number to do this
  action we use the while loop so we will continously ask for the input until we can get desired result.)"""
  while len(mobile_number) != 10:
    print("Invalid mobile number. Please enter a 10-digit number.")
    mobile_number = input("Enter your mobile number: ")

  # Getting the address of the user as an input.
  address = input("Enter your address: ")
  email = input("Enter your email address: ")

  """Validate emai: (With the input we check whether the email contains '@' or not.
  if it does not contain we will allow user to write the username again by using the while loop)"""
  while "@" not in email:
    print("Invalid email address. Please enter a valid email.")
    email = input("Enter your email address: ")

  # Getting the date of birth of the user as an input.
  date_of_birth = input("Enter your date of birth (YYYY-MM-DD): ")

  """Validate date of birth date and calculate legal age to get registered.
  The check is done by using the datetime module. The format we set for the date is YYYY-MM-DD.
  We are checking whether the birth date is greater than 21 if it is then user can be registered else not.
  We also introduce try-except concept to do the validation.
  """
  from datetime import datetime
  try:
    dob = datetime.strptime(date_of_birth, "%Y-%m-%d")
    today = datetime.today()
    age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
    print(age)
  except ValueError:
    print("Invalid date format. Please use YYYY-MM-DD.")
    return

  # Age validation
  if age < 21:
    print("You must be at least 21 years old to create an account.")
    return

  # Framing the customer data into a dictionary after validating and checking whether the input data is valid or not
  customer_details = {
    "name": name,
    "mobile_number": mobile_number,
    "address": address,
    "email": email,
    "date_of_birth": date_of_birth
  }
  # Displaying a Congratulatory message with the assurance that the data has been recorded.
  print("Congratulations, Your account has been created successfully!\nWe have recorded your data.")
  #Displaying the customer details that we have framed as a dictionary.
  print(customer_details)

customer_account()

"""#2. **Vehicle Capacity**
Write a program that advises the logistics manager on how many goods the company's vehicles can
accommodate based on their dimensions. The program should ask the manager to input the length,
width, and height of the vehicle in meters. If each cubic meter can hold 100 kilograms of goods, the
program should calculate and output the maximum weight capacity of the vehicle.

**Note:** If the calculated weight capacity exceeds 5000 kilograms, the program should display a message
indicating that the maximum weight capacity is 5000 kilograms.

##Concepts: def funtion, if statement, try-except, input function, Comparision and Mathematical operator, Error handling.
"""

"""This program is getting length, width and height as an input then calculating the volume in cubic meters and also calculating the maximum weight"""

# Set up length, width, height as the parameters for this program.
def calculate_weight_capacity(length, width, height):
    # Calculate the volume in cubic meters
    volume = length * width * height

    # Calculate the maximum weight capacity (100 kg per cubic meter)
    max_weight_capacity = volume * 100

    # If the calculated capacity exceeds 5000 kg, it will print 5000kg is the maximum capacity of the vehicle else the calculated weight become the maximum wait.
    if max_weight_capacity > 5000:
        max_weight_capacity = 5000
    return max_weight_capacity

# By using try; we seek for the length, width, height of the package.
try:
    length = float(input("Enter the length of the vehicle (in meters): "))
    width = float(input("Enter the width of the vehicle (in meters): "))
    height = float(input("Enter the height of the vehicle (in meters): "))
    #Now applying the function on the inputs and stored in a variable name max_capacity.
    max_capacity = calculate_weight_capacity(length, width, height)
    # With the help of the fstring, we are displaying a statement that shows 2 float values of the weight.
    print(f"The maximum weight capacity of the vehicle is {max_capacity:.2f} kilograms.")
    # Mistakenly if you put some invalid input it will display this message also by using error handling technique we are using ValueError.
except ValueError:
    print("Invalid input. Please enter valid numeric values for dimensions.")

"""#3. **Delivery Time Estimation**
Write a program that estimates the delivery time for a given route. The program should ask the user
to input the distance of the route in kilometres and the average speed of the delivery vehicle in
kilometres per hour. Using this information, the program should calculate and display the estimated
delivery time in hours.


Note: If the calculated estimated delivery time is more than 15 hours, your code should take into
account the driver rest time. Your program should add 8 hours rest to the delivery time and print the
total estimated delivery time accordingly.

##Concepts: def function, shorthand addition, if statement, fstring
"""

"""This function is getting distance, average_speed as inputs and calculate the estimated delivery time.
as per the condition if the estimated delivery time is exceeded by 15 hours we will add extra 8 hours for the rest."""

#This program is getting distance, average_speed as parameters.
def estimate_delivery_time(distance, average_speed):
    estimated_time = distance / average_speed
    if estimated_time > 15:
        # in case if the estimated time is more than 15 we will add extra 8 hours in estimated time as rest for the driver.
        estimated_time += 8
    return estimated_time

# Getting input in float so user can able to put accurate distance and speed.
distance = float(input("Enter the distance of the route in kilometers: "))
average_speed = float(input("Enter the average speed of the vehicle in kilometers per hour: "))

# Calling the function and printing the estimated delivery time.
delivery_time = estimate_delivery_time(distance, average_speed)
print(f"The estimated delivery time is {delivery_time:.2f} hours.")

"""#4. **Calculate Total Cost**
Create a program that calculates and prints the total cost of a delivery based on the weight of the
goods and the delivery distance. The program should ask the user to input the weight of the goods in
kilograms and the delivery distance in kilometres. The cost per kilometre is 0.10 dollars per kilogram. The
minimum delivery charges are $30 and the program should apply a 5% discount for deliveries over
100 kilometres. The program should then calculate and display the total cost of the delivery.

Note: The program must roundoff the weight to the nearest positive value before calculating the cost
of delivery.

##Concepts: def Function, mathematical operator, try-except, valueerror, if statement.
"""

"""This Program is getting weight_kg and distanc_km as input and firstly round-off the value then calculate cost per km by
applying the 0.10 dollars per kg and calculate the total cost with distance there is an exception if the distance is low there is a
minimum delivery charge that is 30$ that user has to pay."""
def calculate_delivery_cost(weight_kg, distance_km):
    # Round off weight to the nearest positive value
    weight_kg = max(0, round(weight_kg))

    # Calculate cost per kilometer with goods weight
    cost_per_km = 0.10 * weight_kg

    # Calculate total cost according to the distance
    total_cost = cost_per_km * distance_km

    # Apply minimum delivery charges if weight and kms values are low.
    total_cost = max(total_cost, 30)

    # Apply discount of 5% on the total cost for deliveries over 100 kilometers.
    if distance_km > 100:
        #if the distance is more than 100, we are alloting the 5% discount.
        total_cost *= 0.95

    return total_cost

#Utilizing the try-except statement, in try block we are seeking for the inputs and assigning them to the function and storing it in a variable.
#In except block, we introduce a value error if user has mistakenly put invalid numbers so it can display it.
try:
    weight_kg = float(input("Enter the weight of the goods (in kilograms): "))
    distance_km = float(input("Enter the delivery distance (in kilometers): "))

    delivery_cost = calculate_delivery_cost(weight_kg, distance_km)
    print(f"Total delivery cost: ${delivery_cost:.2f}")
except ValueError:
    print("Invalid input. Please enter valid numeric values.")

"""# **5. Route Optimization**
Write a program that optimizes the delivery routes for multiple destinations. The program should ask
the user to input the Name of 3 destinations and the distances to each destination from the
warehouse in kilometres. Using this information, the program should design the route such that the
driver visits all destinations based on the distance in a descending order( i.e. starting with the longest
delivery first) and return to the starting point. The program should then display the optimized route.

Note: If 2 destinations have same distance then it must prioritize the destination that has been
entered first.

##Concepts: def Function, lambda function, sorting funtion, input, append, for loop, fstring.
"""

"""This function is parameterized with the destinations. We used sorted function to sort the destinations
based on the distance in descending order with the help of lambda function. A empty list which will append destination name and distance as a tuple
for all destination and distance as a pair. At the end, serve the destinations list to the optimize_route function and iterate it according the conditions.
"""

#This function is getting a list as a parameter and processing the distance of the destination by the key in a reverse order after being sorted.
def optimize_route(destinations):
    # Sort destinations based on distance in descending order
    sorted_destinations = sorted(destinations, key=lambda x: x[1], reverse=True)
    return sorted_destinations

destinations = []
#Utilizing the for loop with the range 3 so it can iterate 3 times (eg, n+3; n= n-1), and allowing uset to put the destination and distance(in kilometers)
# Append it to list
for i in range(3):
    name = input(f"Enter the name of destination {i+1}: ")
    distance = float(input(f"Enter the distance to {name} in kilometers: "))
    destinations.append((name, distance))

#Assinging the list to the function and stored in a variable and iterate it according the conditions.
optimized_route = optimize_route(destinations)
print("The optimized route is:")
for destination in optimized_route:
    print(f"{destination[0]}: {destination[1]} km")

"""# **6. Goods Classification**
Create a program that classifies goods into different categories based on their weight. The program
should ask the user to insert the weight of a goods item in pounds. Based on the weight, the program
should categorize the goods as follows:

• Lightweight: Less than 10 kilograms

• Mediumweight: More than 10 to 50 kilograms

• Heavyweight: More than 50 kilograms to 120 Kilograms

• Must be divided in small sizes: More than 120 Kilograms

The program should then display the category of the goods.

***1 Pound = 0.4535 Kgs***

##Concepts: def Function, mathematical operator, if-elif-else conditional statement, try-except statement.
"""

"""This program is solemnly dependent on the weight of the parcel. Initially it asks weight in pounds and then it converts it into kilograms by doing
some basic math and then categoried it with the help of if elif else conditional statement as per the conditions. It also shows an error if there is any invalid input.
"""
# Converting pounds into kgs and tagged it to most appropriate category as per the conditions using if-elif-else statement.
def Goods_Classification(weight_pounds):
  # Conveting pounds into kgs
  weight_in_kgs = weight_pounds*0.453592
  # if weight is less than 10 kgs
  if weight_in_kgs<10.00:
    return 'The goods are Lightweight.'
  # if weight is lying between 10 to 50 kgs
  elif 10.01<weight_in_kgs<50.00:
    return 'The goods are Mediumweight.'
  # if weight is lying between 50 to 120 kgs
  elif 50.01<weight_in_kgs<120.00:
    return 'The goods are Heavyweight.'
  # if weight is more than 120 kgs
  else:
    return 'The goods is too heavy, needs to be divided in small sizes'

# Try-except statement; try block allows user to enter the input and then it assigning it to function, storing it in a variable and displaying the accurate category.
try:
    weight_pounds = float(input("Enter the weight of the goods item in pounds: "))
    category = Goods_Classification(weight_pounds)
    print(f"Category: {category}")
# This block handle if there is any invalid entried leads to display a valueError.
except ValueError:
    print("Invalid input. Please enter a valid numeric weight.")

"""# **7. Delivery Tracking**
Write a program that tracks the delivery status of a package. The program should ask the user to input
the package's tracking number and display the current status of the package, such as "In transit," "Out
for delivery," or "Delivered."

Note: Use list to store and access the data for some sample tracking (A00001D) numbers and their
status "In transit," "Out for delivery," or "Delivered." .

Note:
The program must ask the example of tracking number acceptable for checking the status.
The Program must reply with an appropriate message if the tracking number is not in the records or
invalid format.

##Concepts: def Function, dictionary, if-else statement, try-except statement, fstring
"""

"""This program operates on the tracking number which we get from the user end and we further check if the tracking number is in our record or not.
if it is in our records then we display the status of the package if not then we display an error message. We also utilize try-except statement to handle the invalid input.
"""

#This function check and try to match the tracking number from the records if it gets a match it will display its respective status else display as a invalid tracking numbers.
#It is also using dictionary to store the tracking number and their respective status.
def get_package_status(tracking_number):
    # Sample data: Tracking numbers and their statuses
    package_data = {
        "A00001D": "In transit",
        "B12345E": "Out for delivery",
        "C98765F": "Delivered"
        # You can add more record as per your requirement.
    }

    if tracking_number in package_data:
        return package_data[tracking_number]
    else:
        return "Invalid tracking number or not found in records"

try:
    tracking_number = input("Enter the package's tracking number: ")
    status = get_package_status(tracking_number)
    print(f"Package status: {status}")
except KeyboardInterrupt:
    print("\nProgram terminated by user.")
except Exception as e:
    print(f"Error: {e}")

"""# **8. Delivery Statistics**
Create a program that calculates and displays the statistics of the company's deliveries. The program
should ask the user to input the destination of 3 deliveries and the delivery times for each delivery.
Using this information, the program should calculate and display the average delivery time and the
fastest and slowest delivery times with destinations.


##Concepts: def Function, for loop, len function, multiple variable assign, append, list
"""

"""This function allows user to enter three multiple destination and its respective delivery time. This data is stored in a list as
in the form of tuple then with the help of function we sum the all time by iterate with a for loop and find the average time, fastest and slowest
delivery along with time and destination.
"""

# This function takes deliveries list which stores multiple tuple referring destination and time and return some insights.
def calculate_delivery_statistics(deliveries):
    total_time = sum(delivery[1] for delivery in deliveries)
    print(total_time)
    average_time = total_time / len(deliveries)

    fastest_delivery = min(deliveries, key=lambda x: x[1])
    slowest_delivery = max(deliveries, key=lambda x: x[1])

    return average_time, fastest_delivery, slowest_delivery

# Using a for loop for getting no. of input we want and append it to the list.
deliveries = []
for i in range(3):
    destination = input(f"Enter the destination of delivery {i+1}: ")
    time = float(input(f"Enter the delivery time to {destination} in hours: "))
    #Appending the entries to the list
    deliveries.append((destination, time))

#Calling the function and storing it in a variable.
average_time, fastest_delivery, slowest_delivery = calculate_delivery_statistics(deliveries)
print(f"Average delivery time: {average_time:.2f} hours")
print(f"Fastest delivery: {fastest_delivery[0]} ({fastest_delivery[1]} hours)")
print(f"Slowest delivery: {slowest_delivery[0]} ({slowest_delivery[1]} hours)")

"""# **9. Delivery Schedule**
Write a program that generates a delivery schedule for the company's drivers. The program should
ask the user to input the name of 3 drivers and their license number (in a prescribed and acceptable
format). The program should then ask to enter the number of delivery available and then display a
assigned number of deliveries of each driver, ensuring that each driver has an equal number of
deliveries except the last one who can have more than others if needed.

##Concepts: def function, for loop, input function, len function, Comparison operator, if-else statement, enumerate funtion, fstring
"""

"""This function takes the driver name and licence number, stores in list of dictionaries later ask for the number of deliveries.
It divides the deliveries among the drivers equally, only when the deliveries are not equally distributed. it divides in such a
way that the first two drivers get few more deliveries than the third so in case of urgency entity can allot the deliveries to the third driver.
"""

# This function takes the driver name and licence number, stores in list of dictionaries later ask for the number of deliveries.
def get_driver_info():
    drivers = []
    for i in range(3):
        name = input(f"Enter name of driver {i + 1}: ")
        license_number = input(f"Enter license number for {name}: ")
        drivers.append({"name": name, "license": license_number})
    return drivers

# It takes drivers list and no. of deliveries and equally divide among the drivers in some case if the deliveries numbers are not ideally to distributed.
# It gives extra deliveries to the first two drivers.
def assign_deliveries(drivers, total_deliveries):
    num_drivers = len(drivers)
    deliveries_per_driver = total_deliveries // num_drivers
    extra_deliveries = total_deliveries % num_drivers

    for i, driver in enumerate(drivers):
        assigned_deliveries = deliveries_per_driver
        if i < extra_deliveries:
            assigned_deliveries += 1
        print(f"{driver['name']} ({driver['license']}): {assigned_deliveries} deliveries")

# Storing hte get_deliver_info function into in a variable and later assign it to another function with no. of deliveries.
print("Delivery Schedule Program")
driver_data = get_driver_info()
total_deliveries = int(input("Enter total number of deliveries available: "))
assign_deliveries(driver_data, total_deliveries)

"""# **10. Account Settings**
Implement a program that allows users to manage their account settings. Provide options to update
their personal information (e.g., name, email address, password) and communication preferences
(e.g., subscription to newsletters, promotional emails).

Note: Assume the account information are name, email address and password. The program saved
the customer details in three list. A list comprises the names, another the email addresses and the
third has the passwords. If a user has his name at position x in the first list, his email address will be
found at the same position in the second lit and his password will be also saved in the same position
in the third list. Write a program that takes as input the user’ email address and password to validate
and then enable the user to update personal information (email address must be unique) and
communication preferences.

##Concepts: def Function, dictionary, input function, if-else statement, While loop and break.
"""

"""This Funtion gives option to the user: 1. Register 2. Update User Info 3. Exit.
In Registration choice: it allows to enter name, email address and password.
In Update choice: It only allows to change the name and email by validating your email with the registered emails if not registered. It suggests to get registered.
In Exit choice: It simply exits the program.
"""

# Function to initialize empty dictionaries for user data
def initialize_user_data():
    # Initialize empty dictionaries for user data
    users = {}
    emails = {}
    passwords = {}
    return users, emails, passwords

# This function takes users, emails and passwords dictionaries and check whether email is unique if it is, it will allow to enter all details otherwise
# It display a message saying "Account already exists."
def register_user(users, emails, passwords):
    name = input("Enter your name: ")
    email = input("Enter your email address: ")
    password = input("Create a password: ")

    # Check if email address is unique
    if email in emails:
        print("Email address already exists. Please choose a different one.")
        return

    # Store user data
    users[email] = name
    emails[email] = email
    passwords[email] = password
    print("User registered successfully!")

# This function is redirected with the second choice that will allow user to change the email and name if the user is registerd.
def update_user_info(email, users, emails):
    new_name = input("Enter your new name: ")
    new_email = input("Enter your new email address: ")

    # Check if the new email address is unique
    if new_email in emails and new_email != email:
        print("Email address already exists. Please choose a different one.")
        return

    # Update user data
    users[email] = new_name
    emails[email] = new_email
    print("User information updated successfully!")
# Assigning function to multiple variables.
users, emails, passwords = initialize_user_data()

# Running a while loop for the choices of the user, each choice will redirect the user to a function.
while True:
    print("\n1. Register\n2. Update User Info\n3. Exit")
    choice = input("Enter your choice: ")

    if choice == "1":
        register_user(users, emails, passwords)
    elif choice == "2":
        email = input("Enter your email address: ")
        if email in emails:
            update_user_info(email, users, emails)
        else:
            print("User not found. Please register first.")
    elif choice == "3":
        print("Exiting program.")
        break
    else:
        print("Invalid choice. Please try again.")